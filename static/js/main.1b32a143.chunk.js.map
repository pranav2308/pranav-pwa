{"version":3,"sources":["styles.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["WrapperDiv","styled","height","width","backgroundColor","StyledHeader","Typography","color","fontFamily","StyledButton","Button","App","React","useState","isAsleep","setIsAsleep","useEffect","navigator","serviceWorker","addEventListener","data","undefined","actions","action","title","icon","body","imgSrc","buttonText","Grid","container","direction","style","paddingTop","item","xs","textAlign","variant","marginTop","src","onClick","Notification","requestPermission","then","result","ready","registration","showNotification","image","vibrate","tag","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1b32a143.chunk.js","sourcesContent":["import { styled } from \"@mui/material/styles\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\n\nconst WrapperDiv = styled(\"div\")({\n  height: \"100vh\",\n  width: \"100vw\",\n  backgroundColor: \"#B3ABCF\",\n});\n\nconst StyledHeader = styled(Typography)({\n  color: \"#413175\",\n  fontFamily: \"Roboto\",\n});\n\nconst StyledButton = styled(Button)({\n  color: \"#FFFFFF\",\n  backgroundColor: \"#413175\",\n  height: \"60px\",\n  \"&:hover\": {\n    backgroundColor: \"#605292\",\n  },\n});\n\nexport { WrapperDiv, StyledHeader, StyledButton };\n","import React from \"react\";\nimport { WrapperDiv, StyledHeader, StyledButton } from \"./styles\";\nimport Grid from \"@mui/material/Grid\";\n\nfunction App() {\n  const [isAsleep, setIsAsleep] = React.useState(true);\n\n  React.useEffect(() => {\n    navigator.serviceWorker.addEventListener(\"message\", ({ data }) => {\n      if (data !== undefined) {\n        setIsAsleep(data);\n      }\n    });\n  }, []);\n\n  const actions = isAsleep\n    ? [\n        {\n          action: \"wake up\",\n          title: \"Wake up the sloth!\",\n          icon: \"images/favicon16.png\",\n        },\n        {\n          action: \"close\",\n          title: \"Close notification\",\n          icon: \"images/favicon16.png\",\n        },\n      ]\n    : [\n        {\n          action: \"put to sleep\",\n          title: \"Put sloth to sleep again!\",\n          icon: \"images/favicon16.png\",\n        },\n        {\n          action: \"close\",\n          title: \"Close notification\",\n          icon: \"images/favicon16.png\",\n        },\n      ];\n\n  const body = isAsleep\n    ? \"Do you really want to wake me up?\"\n    : \"Do you really want me to go to sleep again?\";\n\n  const sendNotification = () => {\n    Notification.requestPermission().then((result) => {\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.showNotification(\"Sloth says:\", {\n          body,\n          icon: \"images/favicon16.png\",\n          image: \"../images/logo192.png\",\n          actions,\n          vibrate: [200, 100, 200, 100, 200, 100, 200],\n          tag: \"notification-sample\",\n        });\n      });\n    });\n  };\n\n  const imgSrc = isAsleep\n    ? \"https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/sloth-sleeping-john-benedict.jpg\"\n    : \"https://i.huffpost.com/gen/1742216/thumbs/o-SLOTH-facebook.jpg\";\n\n  const buttonText = isAsleep\n    ? \"Press this button to wake up the sloth!\"\n    : \"Press this button to put sloth to sleep again\";\n  return (\n    <WrapperDiv>\n      <Grid container direction=\"row\" style={{ paddingTop: \"100px\" }}>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <StyledHeader variant=\"h2\">Sleepy Sloth</StyledHeader>\n        </Grid>\n        <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n          <img src={imgSrc} width=\"300px\" height=\"200px\"></img>\n        </Grid>\n        <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n          <StyledButton onClick={sendNotification}>{buttonText}</StyledButton>\n        </Grid>\n      </Grid>\n    </WrapperDiv>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}