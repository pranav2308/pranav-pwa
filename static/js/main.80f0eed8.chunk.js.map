{"version":3,"sources":["styles.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["WrapperDiv","styled","height","width","backgroundColor","StyledHeader","Typography","color","fontFamily","StyledButton","Button","App","React","useState","isAsleep","setIsAsleep","useEffect","navigator","serviceWorker","addEventListener","data","undefined","wisdomButton","wisdomArray","window","Grid","item","xs","style","textAlign","marginTop","onClick","wisdom","Math","floor","random","length","ready","then","registration","showNotification","body","icon","image","vibrate","tag","shareButton","actions","action","title","imgSrc","buttonText","share","url","location","href","document","e","console","error","container","direction","paddingTop","variant","src","Notification","requestPermission","result","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"wNAIMA,EAAaC,YAAO,MAAPA,CAAc,CAC/BC,OAAQ,QACRC,MAAO,QACPC,gBAAiB,YAGbC,EAAeJ,YAAOK,IAAPL,CAAmB,CACtCM,MAAO,UACPC,WAAY,WAGRC,EAAeR,YAAOS,IAAPT,CAAe,CAClCM,MAAO,UACPH,gBAAiB,UACjBF,OAAQ,OACR,UAAW,CACTE,gBAAiB,a,eC6HNO,MA7If,WACE,MAAgCC,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAH,IAAMI,WAAU,WACdC,UAAUC,cAAcC,iBAAiB,WAAW,YAAe,IAAZC,EAAW,EAAXA,UACxCC,IAATD,GACFL,EAAYK,QAGf,IAEH,IAyBIE,EAzBEC,EAAc,CAClB,sCACA,qCACA,wCACA,kCACA,+BACA,iDACA,kCACA,oFACA,wEAiBE,iBAAkBC,SACpBF,EACE,cAACG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,MAAO,CAAEC,UAAW,SAAUC,UAAW,QAA5D,SACE,cAACrB,EAAD,CAAcsB,QAjBmB,WACrC,IAAMC,EAAST,EAAYU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAYa,SAClEnB,UAAUC,cAAcmB,MAAMC,MAAK,SAAUC,GAC3CA,EAAaC,iBAAiB,cAAe,CAC3CC,KAAMT,EACNU,KAAM,uBACNC,MAAO,wBACPC,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxCC,IAAK,4CASL,0CAON,IAgEIC,EAhEEC,EAAUjC,EACZ,CACE,CACEkC,OAAQ,UACRC,MAAO,qBACPP,KAAM,wBAER,CACEM,OAAQ,QACRC,MAAO,qBACPP,KAAM,yBAGV,CACE,CACEM,OAAQ,eACRC,MAAO,4BACPP,KAAM,wBAER,CACEM,OAAQ,QACRC,MAAO,qBACPP,KAAM,yBAIRD,EAAO3B,EACT,oCACA,8CAiBEoC,EAASpC,EACX,wGACA,iEAEEqC,EAAarC,EACf,qBACA,2BAwBJ,OAVIG,UAAUmC,QACZN,EACE,cAACrB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,MAAO,CAAEC,UAAW,SAAUC,UAAW,QAA5D,SACE,cAACrB,EAAD,CAAcsB,QAfO,WACzB,IACEd,UAAUmC,MAAM,CACdC,IAAK7B,OAAO8B,SAASC,KACrBN,MAAOO,SAASP,QAElB,MAAOQ,GACPC,QAAQC,MAAM,kCAAmCF,KAQ/C,6DAQJ,cAACzD,EAAD,UACE,eAACyB,EAAA,EAAD,CAAMmC,WAAS,EAACC,UAAU,MAAMjC,MAAO,CAAEkC,WAAY,SAArD,UACE,cAACrC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,MAAO,CAAEC,UAAW,UAAvC,SACE,cAACxB,EAAD,CAAc0D,QAAQ,KAAtB,4BAEF,cAACtC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,MAAO,CAAEC,UAAW,SAAUC,UAAW,QAA5D,SACE,qBAAKkC,IAAKd,EAAQ/C,MAAM,QAAQD,OAAO,YAExCoB,EACD,cAACG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,MAAO,CAAEC,UAAW,SAAUC,UAAW,QAA5D,SACE,cAACrB,EAAD,CAAcsB,QAxDG,WACvBkC,aAAaC,oBAAoB5B,MAAK,SAAC6B,GACrClD,UAAUC,cAAcmB,MAAMC,MAAK,SAAUC,GAC3CA,EAAaC,iBAAiB,cAAe,CAC3CC,OACAC,KAAM,uBACNC,MAAO,wBACPI,UACAH,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxCC,IAAK,+BA+CL,SAA0CM,MAE3CL,QC/HHsB,EAAcC,QACW,cAA7B7C,OAAO8B,SAASgB,UAEe,UAA7B9C,OAAO8B,SAASgB,UAEhB9C,OAAO8B,SAASgB,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BzD,UAAUC,cACPyD,SAASF,GACTnC,MAAK,SAACC,GACLA,EAAaqC,cAAgB,WAC3B,IAAMC,EAAmBtC,EAAauC,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf/D,UAAUC,cAAc+D,YAI1BvB,QAAQwB,IACN,+GAKER,GAAUA,EAAOS,UACnBT,EAAOS,SAAS5C,KAMlBmB,QAAQwB,IAAI,sCAGRR,GAAUA,EAAOU,WACnBV,EAAOU,UAAU7C,WAO5B8C,OAAM,SAAC1B,GACND,QAAQC,MAAM,4CAA6CA,MC9FjE,IAYe2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlD,MAAK,YAAkD,IAA/CmD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SFSnB,SAAkBvB,GACvB,GAA6C,kBAAmBzD,UAAW,CAGzE,GADkB,IAAIiF,IAAIC,cAAwB3E,OAAO8B,SAASC,MACpD6C,SAAW5E,OAAO8B,SAAS8C,OAIvC,OAGF5E,OAAOL,iBAAiB,QAAQ,WAC9B,IAAMsD,EAAK,UAAM0B,cAAN,sBAEP/B,IAgEV,SAAiCK,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BhE,MAAK,SAACiE,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1F,UAAUC,cAAcmB,MAAMC,MAAK,SAACC,GAClCA,EAAaqE,aAAatE,MAAK,WAC7Bd,OAAO8B,SAASuD,eAKpBrC,EAAgBC,EAAOC,MAG1BW,OAAM,WACL3B,QAAQwB,IAAI,oEAtFV4B,CAAwBrC,EAAOC,GAI/BzD,UAAUC,cAAcmB,MAAMC,MAAK,WACjCoB,QAAQwB,IACN,+GAMJV,EAAgBC,EAAOC,OE/B/BqC,GAKAzB,M","file":"static/js/main.80f0eed8.chunk.js","sourcesContent":["import { styled } from \"@mui/material/styles\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\n\nconst WrapperDiv = styled(\"div\")({\n  height: \"100vh\",\n  width: \"100vw\",\n  backgroundColor: \"#B3ABCF\",\n});\n\nconst StyledHeader = styled(Typography)({\n  color: \"#413175\",\n  fontFamily: \"Roboto\",\n});\n\nconst StyledButton = styled(Button)({\n  color: \"#FFFFFF\",\n  backgroundColor: \"#413175\",\n  height: \"60px\",\n  \"&:hover\": {\n    backgroundColor: \"#605292\",\n  },\n});\n\nexport { WrapperDiv, StyledHeader, StyledButton };\n","import React from \"react\";\nimport { WrapperDiv, StyledHeader, StyledButton } from \"./styles\";\nimport Grid from \"@mui/material/Grid\";\n\nfunction App() {\n  const [isAsleep, setIsAsleep] = React.useState(true);\n\n  React.useEffect(() => {\n    navigator.serviceWorker.addEventListener(\"message\", ({ data }) => {\n      if (data !== undefined) {\n        setIsAsleep(data);\n      }\n    });\n  }, []);\n\n  const wisdomArray = [\n    \"Don't just do something, sit there!\",\n    \"Never postpone what you can cancel\",\n    \"Always take a pillow wherever you go!\",\n    \"You can never have enough sleep\",\n    \"Use the bathroom facing down\",\n    \"Never waste any time you can spend on sleeping\",\n    \"Always say, I'll do it tomorrow\",\n    \"Getting out of bed for work is something we should be bragging about all the time\",\n    \"There may be no excuse for laziness, but always keep looking for one\",\n  ];\n\n  const sendNonInteractiveNotification = () => {\n    const wisdom = wisdomArray[Math.floor(Math.random() * wisdomArray.length)];\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.showNotification(\"Sloth says:\", {\n        body: wisdom,\n        icon: \"images/favicon16.png\",\n        image: \"../images/logo192.png\",\n        vibrate: [200, 100, 200, 100, 200, 100, 200],\n        tag: \"non-interactive-notification-sample\",\n      });\n    });\n  };\n\n  let wisdomButton;\n  if (\"Notification\" in window) {\n    wisdomButton = (\n      <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n        <StyledButton onClick={sendNonInteractiveNotification}>\n          Listen to sloth's wisdom!\n        </StyledButton>\n      </Grid>\n    );\n  }\n\n  const actions = isAsleep\n    ? [\n        {\n          action: \"wake up\",\n          title: \"Wake up the sloth!\",\n          icon: \"images/favicon16.png\",\n        },\n        {\n          action: \"close\",\n          title: \"Close notification\",\n          icon: \"images/favicon16.png\",\n        },\n      ]\n    : [\n        {\n          action: \"put to sleep\",\n          title: \"Put sloth to sleep again!\",\n          icon: \"images/favicon16.png\",\n        },\n        {\n          action: \"close\",\n          title: \"Close notification\",\n          icon: \"images/favicon16.png\",\n        },\n      ];\n\n  const body = isAsleep\n    ? \"Do you really want to wake me up?\"\n    : \"Do you really want me to go to sleep again?\";\n\n  const sendNotification = () => {\n    Notification.requestPermission().then((result) => {\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.showNotification(\"Sloth says:\", {\n          body,\n          icon: \"images/favicon16.png\",\n          image: \"../images/logo192.png\",\n          actions,\n          vibrate: [200, 100, 200, 100, 200, 100, 200],\n          tag: \"notification-sample\",\n        });\n      });\n    });\n  };\n\n  const imgSrc = isAsleep\n    ? \"https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/sloth-sleeping-john-benedict.jpg\"\n    : \"https://i.huffpost.com/gen/1742216/thumbs/o-SLOTH-facebook.jpg\";\n\n  const buttonText = isAsleep\n    ? \"Wake up the sloth!\"\n    : \"Put sloth to sleep again\";\n\n  const onShareButtonClick = () => {\n    try {\n      navigator.share({\n        url: window.location.href,\n        title: document.title,\n      });\n    } catch (e) {\n      console.error(\"Could not share! we got error: \", e);\n    }\n  };\n\n  let shareButton;\n  if (navigator.share) {\n    shareButton = (\n      <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n        <StyledButton onClick={onShareButtonClick}>\n          Spread the sloth's wisdom with your friends!\n        </StyledButton>\n      </Grid>\n    );\n  }\n\n  return (\n    <WrapperDiv>\n      <Grid container direction=\"row\" style={{ paddingTop: \"100px\" }}>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <StyledHeader variant=\"h2\">Sleepy Sloth</StyledHeader>\n        </Grid>\n        <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n          <img src={imgSrc} width=\"300px\" height=\"200px\"></img>\n        </Grid>\n        {wisdomButton}\n        <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n          <StyledButton onClick={sendNotification}>{buttonText}</StyledButton>\n        </Grid>\n        {shareButton}\n      </Grid>\n    </WrapperDiv>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}